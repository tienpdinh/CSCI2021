                           __________________

                            LAB 03 QUESTIONS
                           __________________


- Name: (FILL THIS in)
- NetID: (THE kauf0095 IN kauf0095@umn.edu)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: Number conversions
=============================

A
~

  Fill in the following table of equivalences.  Filling in the table
  from top to bottom is advantageous as earlier rows can sometimes be
  used to infer lower values. Feel free to make use of any ASCII table
  or the table.c program provided in the week 3 lecture code pack.

   Dec   Hex  Oct  Binary     Char         
  -----------------------------------------
     9  0x09   11  0000 1001  TAB          
    10                        \n (newline) 
        0x20                  SPACE        
                   0011 0010               
    65  0x41  101  0100 0001  A            
    66                                     
        0x4F  117             O            
    80                        P            
    91        133  0101 1011  [            
    97  0x61  141                          
              172  0111 1010  z            
   145  0x91  221             none         
   160             1010 0000  none         
   180  0xB4  264             none         
   255                        none         


Solution                                                      :solution:
--------

   Dec   Hex  Oct  Binary     Char         
  -----------------------------------------
     9  0x09   11  0000 1001  TAB          
    10  0x0A   12  0000 1010  \n (newline) 
    32  0x20   40  0010 0000  SPACE        
    50  0x32   62  0011 0010  2            
    65  0x41  101  0100 0001  A            
    66  0x42  102  0100 0010  B            
    79  0x4F  117  0100 1111  O            
    80  0x50  120  0101 0000  P            
    91  0x5B  133  0101 1011  [            
    97  0x61  141  0110 0001  a            
   122  0x7A  172  0111 1010  z            
   145  0x91  221  1001 0001  none         
   160  0xA0  240  1010 0000  none         
   180  0xB4  264  1011 0000  none         
   255  0xFF  377  1111 1111  none         


B
~

  Fill in the bits, hex, and decimal values for the given examples. The
  first example is completed for you. Assume all of these are 32 bit
  unsigned integers.
  ,----
  |   COMPLETED
  |   Binary:   0000 0000  0000 0000  0001 1000  1110 1001  
  |             0    0     0    0     1    8     E    9
  |   Hex   :   0018E9
  |   Decimal:  6377
  | 
  | 
  |   NUMBER 1
  |   Binary:   0000 0000  0010 1111  0011 1010  1000 1101  
  |             ?
  |   Hex   :   ??
  |   Decimal:  ??
  | 
  | 
  |   NUMBER 2
  |   Binary:   ??  
  |             7    F     8    3     5    A     0    B
  |   Hex   :   7F835A0B
  |   Decimal:  ??
  `----


Solution                                                      :solution:
--------

  ,----
  |   Binary:   0000 0000  0000 0000  0001 1000  1110 1001  
  |             0    0     0    0     1    8     E    9
  |   Hex   :   0018E9
  |   Decimal:  6377
  | 
  | 
  |   Binary:   0000 0000  0010 1111  0011 1010  1000 1101  
  |             0    0     2    F     3    A     8    D
  |   Hex   :   002F3A8D
  |   Decimal:  3,095,181
  | 
  |   Binary:   0111 1111  1000 0011  0101 1100  0000 1101  
  |             7    F     8    3     5    A     0    B
  |   Hex   :   7F835A0B
  |   Decimal:  2,139,314,699
  `----


PROBLEM 2: Signed Integer Conversions
=====================================

A
~

  Apply the steps involved in converting the following positive binary
  number to it's two's complement negation in 8-bit signed
  format. Recall the steps are
  - Subtract 1
  - Invert the bits
  ,----
  | 0111 1100  = 0x7C = 124 (decimal)
  `----
  The result is the two's complement representation of -124.

  Reverse the process by
  - Invert the bits
  - Add one
  to show that the original bits are gotten back.


Solution                                                      :solution:
--------

  ,----
  | Subtract 1:
  |   0111 1100 = +124
  | -         1
  | -----------
  |   0111 1011 = +123
  | 
  | Invert:
  | ~ 0111 1011
  | -----------
  |   1000 0100 = -124
  | 
  | Reverse:
  | Invert:
  | ~ 1000 0100 = -124
  | -----------
  |   0111 1011 = +123
  | 
  | Add 1:
  |   0111 1011 = +123
  | +         1
  | -----------
  |   0101 1100 = +124
  `----


B
~

  Complete the following table of equivalences assuming 8-bit
  twos-complement signed integers. The rightmost column is the inverse
  of the binary representation: flip 1's to 0's, and vice versa.

    Dec   Hex  Binary     Inverse   
  ----------------------------------
     +5  0x05  0000 0101  1111 1010 
     -5        1111 1011            
    +32  0x20                       
    -32  0xE0             0001 1111 
   +127  0x7F                       
   -127  0x81                       
   -128        1000 0000            
     +2                             
     -2  0xFE                       
     +1  0x01  0000 0001            
     -1        1111 1111            
      0                             


Solution                                                      :solution:
--------

    Dec   Hex  Binary     Inverse   
  ----------------------------------
     +5  0x05  0000 0101  1111 1010 
     -5  0xFB  1111 1011  0000 0100 
    +32  0x20  0010 0000  1101 1111 
    -32  0xE0  1110 0000  0001 1111 
   +127  0x7F  0111 1111  1000 0000 
   -127  0x81  1000 0001  0111 1110 
   -128  0x80  1000 0000  0111 1111 
     +2  0x02  0000 0010  1111 1101 
     -2  0xFE  1111 1110  0000 0001 
     +1  0x01  0000 0001  1111 1110 
     -1  0xFF  1111 1111  0000 0000 
      0  0x00  0000 0000  1111 1111 


PROBLEM 3: Converting Strings to Numbers
========================================

  Inspect the program in the lab pack called `convert.c'.  Compile and
  run it using
  ,----
  | > gcc convert.c
  | > ./a.out
  `----
  Describe briefly what kind of conversion is being done by the
  `convert()' function given.
  - A. What kind of data is input?
  - B. What result is produced by the function?
  - C. How is a success versus an error reported?
  - D. Why is this kind of conversion needed?
  - E. What built-in C function does this conversion?


Solution                                                      :solution:
--------

  - A. What kind of data is input?
    - A character string is input
  - B. What result is produced by the function?
    - The result is to set an integer to the numeric value of the string
      converted to an integer. The integer is changed via a pointer
      parameter
  - C. How is a success versus an error reported?
    - The function returns 0 on success and 1 on errors
  - D. Why is this kind of conversion needed?
    - String data is not usable to add/compare as numbers so must be
      converted to binary integers.
  - E. What built-in C function (useful for the assignment) does this
    conversion and how is its calling convention different from
    convert()?
    - The atoi(str) does this kind of conversion but returns the
      resulting integer rather than setting a pointer for it. It does
      not report errors though.


  `=============================================================================='


Review #1: Memory Diagram
=========================

  Examine the code in dog_diagram.c which uses a couple simple functions
  with a struct.
  ,----
  |  1  #include <stdio.h>
  |  2  typedef struct{
  |  3    int age;
  |  4    double weight;
  |  5    char name[8];
  |  6  } dog_t;
  |  7  
  |  8  void init_dog(dog_t *d){
  |  9    strcpy(d->name, "Rolf");
  | 10    d->age = 0;
  | 11    d->weight = 5.0;
  | 12    ////// POSITION A
  | 13    return;
  | 14  }
  | 15  
  | 16  void birthday(int num, dog_t *d){
  | 17    int next = d->age + num;
  | 18    if(next < 3){
  | 19      d->weight += 10.0;
  | 20    }
  | 21    ////// POSITION B
  | 22    d->age = next;
  | 23    return;
  | 24  }
  | 25  
  | 26  int main(){
  | 27    dog_t dog;
  | 28    init_dog(&dog);
  | 29    double curwgt = dog.weight;
  | 30    birthday(2, &dog);
  | 31    printf("%s gained %f pounds\n",
  | 32           dog.name, dog.weight-curwgt);
  | 33    return 0;
  | 34  }
  `----

  Fill in the memory diagrams below for the layout of memory if
  execution stops at the positions given in the comments.


POSITION A
----------

  ,----
  | |------------+-------------+-------+-------|
  | | Frame      | Sym         | Addr  | Value |
  | |------------+-------------+-------+-------|
  | | main()     | dog.age     | #1288 |     0 |
  | |            | dog.weight  |       |       |
  | |            | dog.name[7] |       |       |
  | |            | dog.name[6] |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |------------+-------------+-------+-------|
  | | init_dog() |             |       |       |
  | |            |             |       |       |
  | |------------+-------------+-------+-------|
  `----


POSITION B
----------

  ,----
  | |------------+-------------+-------+-------|
  | | Frame      | Sym         | Addr  | Value |
  | |------------+-------------+-------+-------|
  | | main()     | dog.age     | #1288 |       |
  | |            | dog.weight  |       |       |
  | |            | dog.name[7] |       |       |
  | |            | dog.name[6] |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |------------+-------------+-------+-------|
  | |            |             |       |       |
  | |            |             |       |       |
  | |            |             |       |       |
  | |------------+-------------+-------+-------|
  `----


Solution                                                      :solution:
--------

  ,----
  | POSITION A
  | |------------+-------------+-------+----------------+-------------------------------------------|
  | | Frame      | Sym         | Addr  | Value          | Notes                                     |
  | |------------+-------------+-------+----------------+-------------------------------------------|
  | | main()     | dog.age     | #1288 | 0              |                                           |
  | |            | dog.weight  | #1280 | 5.0            |                                           |
  | |            | dog.name[7] | #1279 | ?              |                                           |
  | |            | dog.name[6] | #1278 | ?              |                                           |
  | |            | dog.name[5] | #1277 | ?              |                                           |
  | |            | dog.name[4] | #1276 | \0             |                                           |
  | |            | dog.name[3] | #1275 | f              |                                           |
  | |            | dog.name[2] | #1274 | l              |                                           |
  | |            | dog.name[1] | #1273 | o              |                                           |
  | |            | dog.name[0] | #1272 | R              |                                           |
  | |            | curwgt      | #1264 | ?              |                                           |
  | |------------+-------------+-------+----------------+-------------------------------------------|
  | | init_dog() | d           | #1256 | #1272 or #1288 | Either might be the "starting" address of |
  | |            |             |       |                | the struct though #1272 is more likely    |
  | |------------+-------------+-------+----------------+-------------------------------------------|
  `----

  ,----
  | POSITION B
  | |------------+-------------+-------+----------------+-----------------------------|
  | | Frame      | Sym         | Addr  | Value          | Notes                       |
  | |------------+-------------+-------+----------------+-----------------------------|
  | | main()     | dog.age     | #1288 | 0              | About to change but not yet |
  | |            | dog.weight  | #1280 | 15.0           | Changed                     |
  | |            | dog.name[7] | #1279 | ?              |                             |
  | |            | dog.name[6] | #1278 | ?              |                             |
  | |            | dog.name[5] | #1277 | ?              |                             |
  | |            | dog.name[4] | #1276 | \0             |                             |
  | |            | dog.name[3] | #1275 | f              |                             |
  | |            | dog.name[2] | #1274 | l              |                             |
  | |            | dog.name[1] | #1273 | o              |                             |
  | |            | dog.name[0] | #1272 | R              |                             |
  | |            | curwgt      | #1264 | ?              |                             |
  | |------------+-------------+-------+----------------+-----------------------------|
  | | birthday() | num         | #1260 | 2              |                             |
  | |            | d           | #1252 | #1272 or #1288 |                             |
  | |            | next        | #1248 | 2              |                             |
  | |------------+-------------+-------+----------------+-----------------------------|
  `----


Review #2: Valgrind Debugging badmem.c
======================================

  The file badmem.c has functions main() and set_pn() in it but has a
  bad memory problem associated with it.  A sample compile and run is as
  follows.

  ,----
  | > gcc -g badmem.c
  | > a.out
  | Segmentation fault (core dumped)
  `----


A
~

  Below is some output from Valgrind. Explain the errors that are
  identified by Valgrind and inspect the source code of badmem.c to
  discover the source of the error. Clearly identify whether there is a
  problem in main() or set_pn().

  ,----
  | > valgrind ./a.out
  | ==15611== Memcheck, a memory error detector
  | ==15611== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  | ==15611== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
  | ==15611== Command: ./a.out
  | ==15611== 
  | ==15611== Use of uninitialised value of size 8
  | ==15611==    at 0x10873B: set_pn (badmem.c:40)
  | ==15611==    by 0x1086B8: main (badmem.c:20)
  | ==15611== 
  | ==15611== Invalid write of size 4
  | ==15611==    at 0x10873B: set_pn (badmem.c:40)
  | ==15611==    by 0x1086B8: main (badmem.c:20)
  | ==15611==  Address 0x5 is not stack'd, malloc'd or (recently) free'd
  | ==15611== 
  | ==15611== 
  | ==15611== Process terminating with default action of signal 11 (SIGSEGV): dumping core
  | ==15611==  Access not within mapped region at address 0x5
  | ==15611==    at 0x10873B: set_pn (badmem.c:40)
  | ==15611==    by 0x1086B8: main (badmem.c:20)
  | ==15611==  If you believe this happened as a result of a stack
  | ==15611==  overflow in your program's main thread (unlikely but
  | ==15611==  possible), you can try to increase the size of the
  | ==15611==  main thread stack using the --main-stacksize= flag.
  | ==15611==  The main thread stack size used in this run was 8720384.
  | ==15611== 
  | ==15611== HEAP SUMMARY:
  | ==15611==     in use at exit: 0 bytes in 0 blocks
  | ==15611==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
  | ==15611== 
  | ==15611== All heap blocks were freed -- no leaks are possible
  | ==15611== 
  | ==15611== For counts of detected and suppressed errors, rerun with: -v
  | ==15611== Use --track-origins=yes to see where uninitialised values come from
  | ==15611== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
  | Segmentation fault (core dumped)
  `----


Solution                                                      :solution:
--------

  The problem is in main(): pointers to pn_t structs are created but
  they are not initialized to anything. These pointers are passed in and
  the assumption of set_pn() is that the structs have already been
  allocated.  This leads to the two valgrind errors identified
  - An uninitialized value is being used
  - Write to illegal memory pointed to by the uninitialized pointer


B
~

  Fix badmem.c so that it works correctly. Your fix should NOT change
  the prototype for the set_pn() function but can make other adjustments
  to local variables.


Solution                                                      :solution:
--------

  In main(), either allocate stack structs and pass them by address as
  in
  ,----
  |   pn_t pn1;
  |   set_pn(arr1, 5, &pn1);
  |   // pn1: {.poss=3, .neg=2}
  `----
  or malloc() memory and free it later as in
  ,----
  |   pn_t *pn1 = malloc(sizeof(pn_t));
  |   set_pn(arr1, 5, pn1);
  |   free(pn1);
  `----


Note:
=====

  Review Problem 3 has been dropped as it will not be covered on Exam 1.
  Bitwise operations will be discussed after Exam 1.
